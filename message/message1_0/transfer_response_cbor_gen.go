// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package message1_0

import (
	"fmt"
	"io"

	datatransfer "github.com/filecoin-project/go-data-transfer"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf

var lengthBuftransferResponse = []byte{134}

func (t *transferResponse) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBuftransferResponse); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.Type (uint64) (uint64)

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.Type)); err != nil {
		return err
	}

	// t.Acpt (bool) (bool)
	if err := cbg.WriteBool(w, t.Acpt); err != nil {
		return err
	}

	// t.Paus (bool) (bool)
	if err := cbg.WriteBool(w, t.Paus); err != nil {
		return err
	}

	// t.XferID (uint64) (uint64)

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.XferID)); err != nil {
		return err
	}

	// t.VRes (typegen.Deferred) (struct)
	if err := t.VRes.MarshalCBOR(w); err != nil {
		return err
	}

	// t.VTyp (datatransfer.TypeIdentifier) (string)
	if len(t.VTyp) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.VTyp was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.VTyp))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.VTyp)); err != nil {
		return err
	}
	return nil
}

func (t *transferResponse) UnmarshalCBOR(r io.Reader) error {
	*t = transferResponse{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 6 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Type (uint64) (uint64)

	{

		maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.Type = uint64(extra)

	}
	// t.Acpt (bool) (bool)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajOther {
		return fmt.Errorf("booleans must be major type 7")
	}
	switch extra {
	case 20:
		t.Acpt = false
	case 21:
		t.Acpt = true
	default:
		return fmt.Errorf("booleans are either major type 7, value 20 or 21 (got %d)", extra)
	}
	// t.Paus (bool) (bool)

	maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajOther {
		return fmt.Errorf("booleans must be major type 7")
	}
	switch extra {
	case 20:
		t.Paus = false
	case 21:
		t.Paus = true
	default:
		return fmt.Errorf("booleans are either major type 7, value 20 or 21 (got %d)", extra)
	}
	// t.XferID (uint64) (uint64)

	{

		maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
		if err != nil {
			return err
		}
		if maj != cbg.MajUnsignedInt {
			return fmt.Errorf("wrong type for uint64 field")
		}
		t.XferID = uint64(extra)

	}
	// t.VRes (typegen.Deferred) (struct)

	{

		t.VRes = new(cbg.Deferred)

		if err := t.VRes.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("failed to read deferred field: %w", err)
		}
	}
	// t.VTyp (datatransfer.TypeIdentifier) (string)

	{
		sval, err := cbg.ReadStringBuf(br, scratch)
		if err != nil {
			return err
		}

		t.VTyp = datatransfer.TypeIdentifier(sval)
	}
	return nil
}
